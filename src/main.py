#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu principal du DataLake NBA
Interface centralis√©e pour toutes les fonctionnalit√©s du projet
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ingestion.nba_data_collector import NBADataCollector
import pandas as pd
import json
from datetime import datetime
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NBADataLakeMenu:
    """Menu principal du DataLake NBA"""
    
    def __init__(self):
        self.collector = None
        self.data_dir = 'data'
        
    def afficher_menu_principal(self):
        """Affiche le menu principal"""
        print("\n" + "="*60)
        print("NBA DATALAKE - MENU PRINCIPAL")
        print("="*60)
        print("1. Collecte de donn√©es via API NBA")
        print("2. Int√©gration dataset Kaggle")
        print("3. Gestion de la base de donn√©es")
        print("4. Dashboard et visualisations")
        print("5. Analyse et insights")
        print("6. Configuration et param√®tres")
        print("7. √âtat du syst√®me")
        print("0. Quitter")
        print("="*60)
    
    def afficher_menu_collecte(self):
        """Menu de collecte de donn√©es"""
        while True:
            print("\n" + "="*50)
            print("COLLECTE DE DONN√âES NBA")
            print("="*50)
            print("1. Collecte compl√®te (toutes les donn√©es)")
            print("2. Collecte joueurs uniquement")
            print("3. Collecte √©quipes uniquement")
            print("4. Collecte leaders actuels")
            print("5. Collecte incr√©mentale")
            print("6. Historique des collectes")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                self.collecte_complete()
            elif choix == "2":
                self.collecte_joueurs()
            elif choix == "3":
                self.collecte_equipes()
            elif choix == "4":
                self.collecte_leaders()
            elif choix == "5":
                self.collecte_incrementale()
            elif choix == "6":
                self.historique_collectes()
            elif choix == "0":
                break
            else:
                print("Choix invalide. Veuillez r√©essayer.")
    
    def afficher_menu_kaggle(self):
        """Menu d'int√©gration du dataset Kaggle"""
        while True:
            print("\n" + "="*50)
            print("INT√âGRATION DATASET KAGGLE")
            print("="*50)
            print("1. T√©l√©charger dataset Kaggle")
            print("2. Mettre √† jour dataset existant")
            print("3. Analyser structure du dataset")
            print("4. Fusionner avec donn√©es API")
            print("5. Validation des donn√©es")
            print("6. Organisation des fichiers")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                self.telecharger_kaggle()
            elif choix == "2":
                self.mettre_a_jour_kaggle()
            elif choix == "3":
                self.analyser_structure_kaggle()
            elif choix == "4":
                self.fusionner_donnees()
            elif choix == "5":
                self.valider_donnees()
            elif choix == "6":
                self.organiser_fichiers()
            elif choix == "0":
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
    
    def afficher_menu_database(self):
        """Menu de gestion de la base de donn√©es"""
        while True:
            print("\n" + "="*50)
            print("GESTION BASE DE DONN√âES")
            print("="*50)
            print("1. Cr√©er base de donn√©es")
            print("2. Importer donn√©es")
            print("3. Requ√™tes et analyses")
            print("4. Statistiques base")
            print("5. Nettoyage donn√©es")
            print("6. Sauvegarde/Restauration")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "2":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "3":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "4":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "5":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "6":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "0":
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
    
    def afficher_menu_dashboard(self):
        """Menu du dashboard et visualisations"""
        while True:
            print("\n" + "="*50)
            print("DASHBOARD ET VISUALISATIONS")
            print("="*50)
            print("1. Lancer dashboard")
            print("2. Cr√©er visualisations")
            print("3. Rapports automatis√©s")
            print("4. KPIs et m√©triques")
            print("5. Interface mobile")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                self.lancer_dashboard()
            elif choix == "2":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "3":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "4":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "5":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "0":
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
    
    def afficher_menu_analyse(self):
        """Menu d'analyse et insights"""
        while True:
            print("\n" + "="*50)
            print("ANALYSE ET INSIGHTS")
            print("="*50)
            print("1. Analyse exploratoire")
            print("2. Machine Learning")
            print("3. Pr√©dictions")
            print("4. D√©couverte de patterns")
            print("5. Rapports d'analyse")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "2":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "3":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "4":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "5":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "0":
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
    
    def afficher_menu_config(self):
        """Menu de configuration"""
        while True:
            print("\n" + "="*50)
            print("CONFIGURATION ET PARAM√àTRES")
            print("="*50)
            print("1. Configuration API")
            print("2. Chemins des dossiers")
            print("3. Param√®tres base de donn√©es")
            print("4. Planification des t√¢ches")
            print("5. Limites de collecte")
            print("6. Param√®tres par d√©faut")
            print("0. Retour au menu principal")
            print("="*50)
            
            choix = input("Votre choix : ").strip()
            
            if choix == "1":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "2":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "3":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "4":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "5":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "6":
                print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
            elif choix == "0":
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
    
    def collecte_complete(self):
        """Lance la collecte compl√®te des donn√©es"""
        print("\nLancement de la collecte compl√®te...")
        try:
            self.collector = NBADataCollector()
            summary = self.collector.run_full_collection()
            print(f"\n‚úÖ Collecte termin√©e avec succ√®s !")
            print(f"R√©sum√© : {summary}")
        except Exception as e:
            print(f"Erreur lors de la collecte : {e}")
    
    def collecte_joueurs(self):
        """Collecte uniquement les donn√©es des joueurs"""
        print("\nüë• Collecte des donn√©es des joueurs...")
        try:
            self.collector = NBADataCollector()
            players_df = self.collector.collect_players_static()
            print(f"‚úÖ {len(players_df)} joueurs collect√©s")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def collecte_equipes(self):
        """Collecte uniquement les donn√©es des √©quipes"""
        print("\nüèÜ Collecte des donn√©es des √©quipes...")
        try:
            self.collector = NBADataCollector()
            teams_df = self.collector.collect_teams_static()
            print(f"‚úÖ {len(teams_df)} √©quipes collect√©es")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def collecte_leaders(self):
        """Collecte uniquement les leaders actuels"""
        print("\nCollecte des leaders actuels...")
        try:
            self.collector = NBADataCollector()
            leaders = self.collector.collect_current_leaders()
            print(f"‚úÖ {len(leaders)} cat√©gories de leaders collect√©es")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def collecte_incrementale(self):
        """Collecte incr√©mentale des donn√©es"""
        print("Collecte incr√©mentale...")
        print("Fonctionnalit√© en cours de d√©veloppement...")
    
    def historique_collectes(self):
        """Affiche l'historique des collectes"""
        print("\nHistorique des collectes :")
        metadata_dir = f"{self.data_dir}/metadata"
        if os.path.exists(metadata_dir):
            files = [f for f in os.listdir(metadata_dir) if f.endswith('.json')]
            if files:
                for file in sorted(files, reverse=True):
                    file_path = os.path.join(metadata_dir, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        session_id = metadata.get('session_id', 'N/A')
                        duration = metadata.get('duration', 0)
                        errors = len(metadata.get('errors', []))
                        print(f"  {session_id} - {duration:.1f}s - {errors} erreurs")
                    except:
                        print(f"  {file} - Erreur de lecture")
            else:
                print("  Aucune collecte trouv√©e")
        else:
            print("  Aucun historique disponible")
    
    def telecharger_kaggle(self):
        """T√©l√©charge le dataset Kaggle"""
        print("\nT√©l√©chargement du dataset Kaggle...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            success = integrator.telecharger_dataset_kaggle()
            if success:
                print("‚úÖ Dataset Kaggle t√©l√©charg√© avec succ√®s")
            else:
                print("T√©l√©chargement manuel requis - instructions cr√©√©es")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def mettre_a_jour_kaggle(self):
        """Met √† jour le dataset Kaggle existant"""
        print("\nüîÑ Mise √† jour du dataset Kaggle...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            success = integrator.telecharger_dataset_kaggle(force_download=True)
            if success:
                print("‚úÖ Dataset Kaggle mis √† jour")
            else:
                print("‚ÑπÔ∏è Mise √† jour manuelle requise")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def analyser_structure_kaggle(self):
        """Analyse la structure du dataset Kaggle"""
        print("\nüìä Analyse de la structure du dataset Kaggle...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            analysis = integrator.analyser_structure_dataset()
            if analysis:
                print(f"‚úÖ Analyse termin√©e - {len(analysis.get('files_found', []))} fichiers analys√©s")
                print(f"üìã Rapport sauvegard√© dans data/kaggle/")
            else:
                print("‚ÑπÔ∏è Aucun fichier √† analyser")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def fusionner_donnees(self):
        """Fusionne les donn√©es Kaggle avec l'API NBA"""
        print("\nüîó Fusion des donn√©es Kaggle et API NBA...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            success = integrator.fusionner_avec_api_nba()
            if success:
                print("‚úÖ Fusion des donn√©es termin√©e")
                print(f"üìã R√©sultats sauvegard√©s dans data/processed/")
            else:
                print("‚ÑπÔ∏è Aucune fusion possible")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def valider_donnees(self):
        """Valide la qualit√© des donn√©es"""
        print("\nüìã Validation des donn√©es...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            validation = integrator.valider_qualite_donnees()
            if validation:
                print(f"‚úÖ Validation termin√©e - {len(validation.get('files_validated', []))} fichiers valid√©s")
                print(f"üìã Rapport sauvegard√© dans data/kaggle/")
            else:
                print("‚ÑπÔ∏è Aucun fichier √† valider")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def organiser_fichiers(self):
        """Organise les fichiers de donn√©es"""
        print("\nüóÇÔ∏è Organisation des fichiers...")
        try:
            from ingestion.kaggle_integrator import KaggleIntegrator
            integrator = KaggleIntegrator()
            success = integrator.organiser_fichiers()
            if success:
                print("‚úÖ Organisation des fichiers termin√©e")
                print(f"üìÅ Nouvelle structure cr√©√©e dans data/")
            else:
                print("‚ÑπÔ∏è Organisation non possible")
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
    
    def lancer_dashboard(self):
        """Lance le dashboard interactif"""
        print("\nüöÄ Lancement du dashboard...")
        print("üîÑ Fonctionnalit√© en cours de d√©veloppement...")
        print("üìã Prochainement : Interface Dash avec Plotly")
    
    def etat_systeme(self):
        """Affiche l'√©tat actuel du syst√®me"""
        print("\nüìã √âTAT DU SYST√àME NBA DATALAKE")
        print("="*50)
        
        # V√©rification des dossiers
        print("üìÅ Structure des dossiers :")
        for folder in ['data', 'data/raw', 'data/processed', 'data/metadata']:
            if os.path.exists(folder):
                files = len([f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))])
                print(f"  ‚úÖ {folder} : {files} fichiers")
            else:
                print(f"  ‚ùå {folder} : Absent")
        
        # V√©rification des donn√©es collect√©es
        print("\nüìä Donn√©es disponibles :")
        if os.path.exists('data/raw'):
            raw_files = [f for f in os.listdir('data/raw') if f.endswith('.csv')]
            if raw_files:
                for file in raw_files:
                    file_path = os.path.join('data/raw', file)
                    size = os.path.getsize(file_path) / 1024  # KB
                    print(f"  üìÑ {file} : {size:.1f} KB")
            else:
                print("  Aucun fichier de donn√©es trouv√©")
        
        # V√©rification de l'API
        print("\nüîå √âtat de l'API NBA :")
        try:
            from nba_api.stats.static import players
            all_players = players.get_players()
            print(f"  ‚úÖ API NBA : {len(all_players)} joueurs accessibles")
        except Exception as e:
            print(f"  ‚ùå API NBA : Erreur - {e}")
    
    def executer(self):
        """Ex√©cute le menu principal"""
        while True:
            self.afficher_menu_principal()
            choix = input("\nVotre choix : ").strip()
            
            if choix == "1":
                self.afficher_menu_collecte()
            elif choix == "2":
                self.afficher_menu_kaggle()
            elif choix == "3":
                self.afficher_menu_database()
            elif choix == "4":
                self.afficher_menu_dashboard()
            elif choix == "5":
                self.afficher_menu_analyse()
            elif choix == "6":
                self.afficher_menu_config()
            elif choix == "7":
                self.etat_systeme()
            elif choix == "0":
                print("\nüëã Au revoir ! Merci d'avoir utilis√© le NBA DataLake.")
                break
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
            
            input("\nAppuyez sur Entr√©e pour continuer...")

def main():
    """Fonction principale"""
    print("üèÄ NBA DATALAKE - D√âMARRAGE")
    print("="*50)
    
    menu = NBADataLakeMenu()
    menu.executer()

if __name__ == "__main__":
    main()
